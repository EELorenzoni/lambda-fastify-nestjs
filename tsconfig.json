{
    "compilerOptions": {
        "module": "NodeNext",
        "moduleResolution": "NodeNext",
        "declaration": true,
        "removeComments": true,
        "emitDecoratorMetadata": true,
        "experimentalDecorators": true,
        "allowSyntheticDefaultImports": true,
        "target": "esnext",
        "sourceMap": true,
        "outDir": "./dist",
        "baseUrl": "./",
        "incremental": true,
        "skipLibCheck": true,
        "strictNullChecks": true,
        "noImplicitAny": true,
        "strictBindCallApply": false,
        "forceConsistentCasingInFileNames": true,
        "noFallthroughCasesInSwitch": true,
        "strict": true,
        "noUnusedParameters": true,
        "noUnusedLocals": true,
        "strictPropertyInitialization": true,
        "esModuleInterop": true,
        "paths": {
            "@/*": [
                "src/*"
            ]
        }
    },
    "exclude": [
        "node_modules",
        "dist"
    ]
}
/**
Dentro de "compilerOptions" se definen las opciones que controlan el comportamiento del compilador de TypeScript:

"module": "NodeNext" y "moduleResolution": "NodeNext": Estas opciones configuran cómo TypeScript maneja los módulos de JavaScript. "NodeNext" es una configuración moderna que intenta seguir el comportamiento de los módulos en las versiones más recientes de Node.js. Esto permite usar tanto la sintaxis import/export moderna como la antigua require().

"declaration": true: Si se establece en true, el compilador generará archivos de declaración (.d.ts) junto con los archivos JavaScript compilados. Estos archivos de declaración son esenciales para que otros proyectos de TypeScript puedan entender la tipificación de tu código sin necesidad de ver el código fuente JavaScript.

"removeComments": true: Esta opción indica al compilador que elimine todos los comentarios del código TypeScript en la salida JavaScript final.

"emitDecoratorMetadata": true y "experimentalDecorators": true: Estas dos opciones están relacionadas con el uso de "decoradores", una característica experimental en JavaScript/TypeScript que se utiliza a menudo en frameworks como Angular o NestJS para añadir metadatos a las clases, métodos, propiedades, etc. Deben ambas estar en true para poder usar decoradores.

"allowSyntheticDefaultImports": true: Esto permite importar módulos que no tienen una exportación por defecto usando la sintaxis de importación por defecto (por ejemplo, import React from 'react'; aunque React no tenga una exportación default). TypeScript realizará una comprobación adicional para hacer que esto funcione.

"target": "esnext": Especifica la versión de ECMAScript (estándar de JavaScript) a la que se debe compilar el código TypeScript. "esnext" significa que se utilizará la última versión disponible de JavaScript, lo que podría incluir características aún no completamente estandarizadas. Generalmente, se elige un target más específico como "ES2020" o "ES2021" para asegurar compatibilidad con entornos de ejecución específicos.

"sourceMap": true: Cuando esta opción está habilitada, el compilador generará archivos de "mapa de origen" (.js.map). Estos archivos permiten a los depuradores (por ejemplo, en el navegador o Node.js) mapear el código JavaScript compilado de vuelta al código TypeScript original, facilitando la depuración.

"outDir": "./dist": Define el directorio donde se deben generar los archivos JavaScript compilados y los archivos de declaración (si "declaration" es true). En este caso, se crearán en una carpeta llamada dist en la raíz del proyecto.

"baseUrl": "./": Especifica el directorio base para resolver las importaciones de módulos no relativos. Al establecerlo en ./, se indica que las importaciones no relativas se buscarán a partir de la raíz del proyecto.

"incremental": true: Esta opción le dice a TypeScript que guarde información sobre la última compilación para poder realizar compilaciones más rápidas en el futuro, solo recompilando los archivos que han cambiado.

"skipLibCheck": true: Al establecerse en true, el compilador omitirá la comprobación de tipos de los archivos de declaración (.d.ts). Esto puede acelerar el proceso de compilación, pero también podría ocultar algunos errores de tipo en las bibliotecas de terceros.

"strictNullChecks": false: Esta opción controla si TypeScript debe ser estricto con los valores null y undefined. Si se establece en false, se relajan las reglas y se permite que las variables puedan ser null o undefined sin una comprobación explícita. Generalmente, se recomienda tener esta opción en true para una mayor seguridad de tipos.

"noImplicitAny": true: Cuando esta opción es true, TypeScript generará un error si no puede inferir el tipo de una variable y no se ha especificado explícitamente. Esto ayuda a evitar errores sutiles.

"strictBindCallApply": false: Esta opción controla la comprobación de tipos para los métodos bind, call y apply en las funciones. Si es true, TypeScript realizará una comprobación más estricta de los argumentos pasados a estos métodos.

"forceConsistentCasingInFileNames": false: Cuando es true, TypeScript requerirá que las mayúsculas y minúsculas en las referencias de los archivos coincidan exactamente con las mayúsculas y minúsculas en el sistema de archivos. Esto ayuda a evitar problemas en sistemas operativos que distinguen entre mayúsculas y minúsculas (como Linux).

"noFallthroughCasesInSwitch": false: Si se establece en true, TypeScript generará un error cuando un caso en una declaración switch "cae" al siguiente caso sin una declaración break.

"strict": true: Esta es una opción "bandera" que habilita varias opciones de verificación de tipos más estrictas a la vez, incluyendo noImplicitAny, strictNullChecks, strictBindCallApply, forceConsistentCasingInFileNames, y más. Si se establece en true, generalmente se recomienda desactivar individualmente las reglas estrictas que no desees aplicar. En tu caso, tienes strict: true pero has desactivado explícitamente algunas de sus sub-opciones (strictNullChecks, strictBindCallApply, forceConsistentCasingInFileNames, noFallthroughCasesInSwitch, strictPropertyInitialization).

"noUnusedParameters": true: Si es true, TypeScript mostrará un error por los parámetros de función que no se utilizan en el cuerpo de la función.

"noUnusedLocals": true: Similar a noUnusedParameters, pero para las variables locales que no se utilizan dentro de su scope.

"strictPropertyInitialization": false: Cuando es true, TypeScript asegura que las propiedades de clase no inicializadas en el constructor se declaren como opcionales (usando ?). Al estar en false, se relaja esta restricción.

"esModuleInterop": true: Esta opción emite código adicional para habilitar una interoperabilidad más fluida entre los módulos CommonJS (el sistema de módulos tradicional de Node.js) y los módulos ES Modules (el estándar moderno de JavaScript). Se recomienda mantenerla en true para evitar problemas al importar paquetes que utilizan diferentes sistemas de módulos.

"paths": { "@/*": ["src/*"] }: Esta opción configura el sistema de resolución de módulos para permitir importaciones relativas a un directorio base utilizando un alias. En este caso, cualquier importación que comience con @/ se resolverá buscando en el directorio src/. Por ejemplo, import algo from '@/componentes/Algo'; buscará el archivo src/componentes/Algo.

Fuera de "compilerOptions", tienes la sección "exclude":

"exclude": ["node_modules", "dist"]: Esta matriz especifica los directorios y/o archivos que el compilador de TypeScript debe ignorar. Aquí, se le indica que no incluya los contenidos de las carpetas node_modules (donde se instalan las dependencias del proyecto) y dist (el directorio de salida de la compilación) en el proceso de compilación.
 * 
 */